result_airway_uft_DEC_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_DEC.csv')
result_airway_uft_DEC_full$cluster <- as.factor(result_airway_uft_DEC_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_DEC_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_DEC_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_DEC_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_DEC_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_DEC <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_DEC
plot(SplitRF_model_airway_DEC, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_DEC$err.rate),
fill = 1:ncol(SplitRF_model_airway_DEC$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_DEC, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_DEC, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
predValid_class_val <- predict(SplitRF_model_airway_DEC, split_validate %>% select(- cluster), type = "class")
adjustedRandIndex(predValid_class_val, split_validate$cluster)
extCriteria(as.integer(predValid_class_val), as.integer(split_validate$cluster), crit = "all")
# copying the data
result_airway_uft_DEC_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_DEC.csv')
result_airway_uft_DEC_full$cluster <- as.factor(result_airway_uft_DEC_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_DEC_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_DEC_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_DEC_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_DEC_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_DEC <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_DEC
plot(SplitRF_model_airway_DEC, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_DEC$err.rate),
fill = 1:ncol(SplitRF_model_airway_DEC$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_DEC, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_DEC, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
predValid_class_val <- predict(SplitRF_model_airway_DEC, split_validate %>% select(- cluster), type = "class")
adjustedRandIndex(predValid_class_val, split_validate$cluster)
extCriteria(as.integer(predValid_class_val), as.integer(split_validate$cluster), crit = "all")
# copying the data
result_airway_uft_DEC_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_DEC.csv')
result_airway_uft_DEC_full$cluster <- as.factor(result_airway_uft_DEC_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_DEC_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_DEC_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_DEC_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_DEC_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_DEC <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_DEC
plot(SplitRF_model_airway_DEC, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_DEC$err.rate),
fill = 1:ncol(SplitRF_model_airway_DEC$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_DEC, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_DEC, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
# copying the data
result_airway_uft_DEC_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_DEC.csv')
result_airway_uft_DEC_full$cluster <- as.factor(result_airway_uft_DEC_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_DEC_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_DEC_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_DEC_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_DEC_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_DEC <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_DEC
plot(SplitRF_model_airway_DEC, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_DEC$err.rate),
fill = 1:ncol(SplitRF_model_airway_DEC$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_DEC, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_DEC, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
predValid_class_val <- predict(SplitRF_model_airway_DEC, split_validate %>% select(- cluster), type = "class")
adjustedRandIndex(predValid_class_val, split_validate$cluster)
extCriteria(as.integer(predValid_class_val), as.integer(split_validate$cluster), crit = "all")
# copying the data
result_airway_uft_DEC_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_DEC.csv')
result_airway_uft_DEC_full$cluster <- as.factor(result_airway_uft_DEC_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_DEC_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_DEC_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_DEC_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_DEC_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_DEC <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_DEC
plot(SplitRF_model_airway_DEC, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_DEC$err.rate),
fill = 1:ncol(SplitRF_model_airway_DEC$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_DEC, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_DEC, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
# copying the data
result_airway_uft_DEC_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_DEC.csv')
result_airway_uft_DEC_full$cluster <- as.factor(result_airway_uft_DEC_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_DEC_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_DEC_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_DEC_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_DEC_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_DEC <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_DEC
plot(SplitRF_model_airway_DEC, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_DEC$err.rate),
fill = 1:ncol(SplitRF_model_airway_DEC$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_DEC, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_DEC, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
predValid_class_val <- predict(SplitRF_model_airway_DEC, split_validate %>% select(- cluster), type = "class")
adjustedRandIndex(predValid_class_val, split_validate$cluster)
extCriteria(as.integer(predValid_class_val), as.integer(split_validate$cluster), crit = "all")
# copying the data
result_airway_uft_DEC_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_DEC.csv')
result_airway_uft_DEC_full$cluster <- as.factor(result_airway_uft_DEC_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_DEC_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_DEC_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_DEC_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_DEC_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_DEC <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_DEC
plot(SplitRF_model_airway_DEC, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_DEC$err.rate),
fill = 1:ncol(SplitRF_model_airway_DEC$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_DEC, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_DEC, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
predValid_class_val <- predict(SplitRF_model_airway_DEC, split_validate %>% select(- cluster), type = "class")
adjustedRandIndex(predValid_class_val, split_validate$cluster)
extCriteria(as.integer(predValid_class_val), as.integer(split_validate$cluster), crit = "all")
# copying the data
result_airway_uft_DEC_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_DEC.csv')
result_airway_uft_DEC_full$cluster <- as.factor(result_airway_uft_DEC_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_DEC_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_DEC_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_DEC_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_DEC_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_DEC <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_DEC
plot(SplitRF_model_airway_DEC, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_DEC$err.rate),
fill = 1:ncol(SplitRF_model_airway_DEC$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_DEC, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_DEC, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
predValid_class_val <- predict(SplitRF_model_airway_DEC, split_validate %>% select(- cluster), type = "class")
adjustedRandIndex(predValid_class_val, split_validate$cluster)
extCriteria(as.integer(predValid_class_val), as.integer(split_validate$cluster), crit = "all")
# copying the data
result_airway_uft_DEC_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_DEC.csv')
result_airway_uft_DEC_full$cluster <- as.factor(result_airway_uft_DEC_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_DEC_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_DEC_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_DEC_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_DEC_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_DEC <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_DEC
plot(SplitRF_model_airway_DEC, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_DEC$err.rate),
fill = 1:ncol(SplitRF_model_airway_DEC$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_DEC, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_DEC, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
predValid_class_val <- predict(SplitRF_model_airway_DEC, split_validate %>% select(- cluster), type = "class")
adjustedRandIndex(predValid_class_val, split_validate$cluster)
extCriteria(as.integer(predValid_class_val), as.integer(split_validate$cluster), crit = "all")
# copying the data
result_airway_uft_n2d_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_n2d.csv')
result_airway_uft_n2d_full$cluster <- as.factor(result_airway_uft_n2d_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_n2d_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_n2d_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_n2d_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_n2d_full[-train_indices, ] #generating test data set
# copying the data
result_airway_uft_n2d_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_n2d.csv')
result_airway_uft_n2d_full$cluster <- as.factor(result_airway_uft_n2d_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_n2d_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_n2d_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_n2d_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_n2d_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_n2d <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_n2d
plot(SplitRF_model_airway_n2d, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_n2d$err.rate),
fill = 1:ncol(SplitRF_model_airway_n2d$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_n2d, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_n2d, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
predValid_class_val <- predict(SplitRF_model_airway_n2d, split_validate %>% select(- cluster), type = "class")
adjustedRandIndex(predValid_class_val, split_validate$cluster)
extCriteria(as.integer(predValid_class_val), as.integer(split_validate$cluster), crit = "all")
# copying the data
result_airway_uft_n2d_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_n2d.csv')
result_airway_uft_n2d_full$cluster <- as.factor(result_airway_uft_n2d_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_n2d_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_n2d_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_n2d_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_n2d_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_n2d <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_n2d
plot(SplitRF_model_airway_n2d, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_n2d$err.rate),
fill = 1:ncol(SplitRF_model_airway_n2d$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_n2d, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_n2d, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
predValid_class_val <- predict(SplitRF_model_airway_n2d, split_validate %>% select(- cluster), type = "class")
adjustedRandIndex(predValid_class_val, split_validate$cluster)
extCriteria(as.integer(predValid_class_val), as.integer(split_validate$cluster), crit = "all")
ClusterPurity <- function(clusters, classes) {
sum(apply(table(classes, clusters), 2, max)) / length(clusters)}
predValid_class_val <- predict(SplitRF_model_airway_n2d, split_validate %>% select(- cluster), type = "class")
adjustedRandIndex(predValid_class_val, split_validate$cluster)
extCriteria(as.integer(predValid_class_val), as.integer(split_validate$cluster), crit = "all")
ClusterPurity(predValid_class_val,split_validate$cluster)
# copying the data
result_airway_uft_DEC_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_DEC.csv')
result_airway_uft_DEC_full$cluster <- as.factor(result_airway_uft_DEC_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_DEC_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_DEC_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_DEC_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_DEC_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_DEC <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_DEC
plot(SplitRF_model_airway_DEC, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_DEC$err.rate),
fill = 1:ncol(SplitRF_model_airway_DEC$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_DEC, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_DEC, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
ClusterPurity(predValid_class_val,split_validate$cluster)
# copying the data
result_airway_uft_n2d_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_n2d.csv')
result_airway_uft_n2d_full$cluster <- as.factor(result_airway_uft_n2d_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_n2d_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_n2d_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_n2d_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_n2d_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# copying the data
result_airway_uft_n2d_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_n2d.csv')
result_airway_uft_n2d_full$cluster <- as.factor(result_airway_uft_n2d_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_n2d_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_n2d_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_n2d_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_n2d_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_n2d <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_n2d
plot(SplitRF_model_airway_n2d, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_n2d$err.rate),
fill = 1:ncol(SplitRF_model_airway_n2d$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_n2d, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_n2d, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
ClusterPurity(predValid_class_val,split_validate$cluster)
# copying the data
result_airway_uft_n2d_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_n2d.csv')
result_airway_uft_n2d_full$cluster <- as.factor(result_airway_uft_n2d_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_n2d_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_n2d_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_n2d_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_n2d_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_n2d <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_n2d
plot(SplitRF_model_airway_n2d, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_n2d$err.rate),
fill = 1:ncol(SplitRF_model_airway_n2d$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_n2d, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_n2d, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
ClusterPurity <- function(clusters, classes) {
sum(apply(table(classes, clusters), 2, max)) / length(clusters)}
ClusterPurity(predValid_class_val,split_validate$cluster)
# copying the data
result_airway_uft_n2d_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_n2d.csv')
result_airway_uft_n2d_full$cluster <- as.factor(result_airway_uft_n2d_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_n2d_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_n2d_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_n2d_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_n2d_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_n2d <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_n2d
plot(SplitRF_model_airway_n2d, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_n2d$err.rate),
fill = 1:ncol(SplitRF_model_airway_n2d$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_n2d, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_n2d, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
ClusterPurity(predValid_class_val,split_validate$cluster)
# copying the data
result_airway_uft_n2d_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_n2d.csv')
result_airway_uft_n2d_full$cluster <- as.factor(result_airway_uft_n2d_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_n2d_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_n2d_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_n2d_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_n2d_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_n2d <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_n2d
plot(SplitRF_model_airway_n2d, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_n2d$err.rate),
fill = 1:ncol(SplitRF_model_airway_n2d$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_n2d, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_n2d, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
ClusterPurity(predValid_class_val,split_validate$cluster)
ClusterPurity(predValid_class_val,split_validate$cluster)
predValid_class_val <- predict(SplitRF_model_airway_n2d, split_validate %>% select(- cluster), type = "class")
adjustedRandIndex(predValid_class_val, split_validate$cluster)
extCriteria(as.integer(predValid_class_val), as.integer(split_validate$cluster), crit = "all")
ClusterPurity(predValid_class_val,split_validate$cluster)
# copying the data
result_airway_uft_n2d_full <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Intermediate/CSV_output_data/result_airway_uft_n2d.csv')
result_airway_uft_n2d_full$cluster <- as.factor(result_airway_uft_n2d_full$cluster)
n_train <- round(0.9 * nrow(result_airway_uft_n2d_full)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(result_airway_uft_n2d_full), n_train) #creating a vector with random indices
split_train <- result_airway_uft_n2d_full[train_indices, ] #generating train data set (with ideces = train_indices)
split_validate <- result_airway_uft_n2d_full[-train_indices, ] #generating test data set
n_train <- round(0.9 * nrow(split_train)) #80% of length of main data set as integer
train_indices <- sample(1:nrow(split_train), n_train) #creating a vector with random indices
split_train_train <- split_train[train_indices, ] #generating train data set (with ideces = train_indices)
split_train_test <- split_train[-train_indices, ] #generating test data set
# Create a Random Forest model with default parameters
SplitRF_model_airway_n2d <- randomForest(cluster ~ ., data = split_train_train, importance = TRUE)
SplitRF_model_airway_n2d
plot(SplitRF_model_airway_n2d, main = "Model Error by Number of Trees")
legend(x = "right",
legend = colnames(SplitRF_model_airway_n2d$err.rate),
fill = 1:ncol(SplitRF_model_airway_n2d$err.rate))
# Predicting on Validation set
predValid <- predict(SplitRF_model_airway_n2d, split_train_test, type = "prob")
predValid_class <- predict(SplitRF_model_airway_n2d, split_train_test, type = "class")
confusionMatrix(data = predValid_class, reference = split_train_test$cluster)
predValid_class_val <- predict(SplitRF_model_airway_n2d, split_validate %>% select(- cluster), type = "class")
adjustedRandIndex(predValid_class_val, split_validate$cluster)
extCriteria(as.integer(predValid_class_val), as.integer(split_validate$cluster), crit = "all")
ClusterPurity(predValid_class_val,split_validate$cluster)
library(reticulate)
use_condaenv('AirwayClust')
from FcDEC import FcDEC
head(Airway2)
library(reticulate)
use_condaenv('AirwayClust')
import pandas as pd
import pandas
import(pandas)
import pandas
import(pandas, as = pd)
import(pandas)
getwd()
Sys.which()
.libPaths()
#.libPaths()
#use_condaenv('AirwayClust')
use_condaenv(condaenv = 'AirwayClust', conda = "/Users/xbasra/miniconda3/envs/AirwayClust/")
import(pandas)
import pandas
mydata <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Original_Data/Airway Disease Phenotyping Data Sets5/WSAS And OLIN Airway Disease Phenotyping.csv')
#library('FactoMineR')
library(tidyverse)
#library('FactoMineR')
library(tidyverse)
mydata <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Original_Data/Airway Disease Phenotyping Data Sets5/WSAS And OLIN Airway Disease Phenotyping.csv')
#library('FactoMineR')
library(tidyverse)
mydata <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Original_Data/Airway Disease Phenotyping Data Sets5/WSAS And OLIN Airway Disease Phenotyping.csv')
#library('FactoMineR')
library(tidyverse)
mydata <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Original_Data/Airway Disease Phenotyping Data Sets5/WSAS And OLIN Airway Disease Phenotyping.csv')
#library('FactoMineR')
library(tidyverse)
mydata <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Original_Data/Airway Disease Phenotyping Data Sets5/WSAS And OLIN Airway Disease Phenotyping.csv')
#library('FactoMineR')
library(tidyverse)
#library('FactoMineR')
library(tidyverse)
#library('FactoMineR')
library(tidyverse)
#library('FactoMineR')
library(tidyverse)
#library('FactoMineR')
library(tidyverse)
#library('FactoMineR')
library(tidyverse)
mydata <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Original_Data/Airway Disease Phenotyping Data Sets5/WSAS And OLIN Airway Disease Phenotyping.csv')
#library('FactoMineR')
library(tidyverse)
#library('FactoMineR')
library(tidyverse)
#library('FactoMineR')
library(tidyverse)
mydata <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Original_Data/Airway Disease Phenotyping Data Sets5/WSAS And OLIN Airway Disease Phenotyping.csv')
#library('FactoMineR')
library(tidyverse)
mydata <- read.csv('/Users/xbasra/Documents/Data/Airway_Clustering/Original_Data/Airway Disease Phenotyping Data Sets5/WSAS And OLIN Airway Disease Phenotyping.csv')
#library('FactoMineR')
library(tidyverse)
library(treeClust)
library(factoextra)
library(Rtsne)
library(ggplot2)
source('~/Documents/Data/Airway_Clustering/R_Functions/Functions.R')
Airway2 <- Get_Binary_data(mydata)
Airway_cate_to_num_only_cate_test  <- UFT_func(Airway2, Seed = 33)
Airway_cate_to_num_only_cate_test  <- UFT_func(Airway2, Seed = 33)
converted_airway <- bined_converted_func(converted_data = Airway_cate_to_num_only_cate, original_data = Airway2)
rm(Airway_cate_to_num_only_cate_test)
Airway_cate_to_num_only_cate  <- UFT_func(Airway2, Seed = 33)
converted_airway <- bined_converted_func(converted_data = Airway_cate_to_num_only_cate, original_data = Airway2)
